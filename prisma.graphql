# source: http://drreddy.apollolife.com:9000/drreddy-prj-dev
# timestamp: Mon Jul 01 2019 18:54:54 GMT+0530 (India Standard Time)

type AggregateCandidate {
  count: Int!
}

type AggregateCounselor {
  count: Int!
}

type AggregateFunction {
  count: Int!
}

type AggregateHRAScan {
  count: Int!
}

type AggregateIntervention {
  count: Int!
}

type AggregateInterventionType {
  count: Int!
}

type AggregateQualification {
  count: Int!
}

type AggregateSubfunction {
  count: Int!
}

type AggregateVertical {
  count: Int!
}

type AggregateWorklevel {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Candidate implements Node {
  id: ID!
  empName: String!
  empCode: String!
  mobileNumber: String!
  counselor: Counselor!
  region: String
  unit: String
  location: String
  gender: Gender!
  doj: String
  age: Int
  qualification: String
  function: String
  subfunction: String
  vertical: String
  worklevel: String
  interventionType: String
  intervention: String
}

"""A connection to a list of items."""
type CandidateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CandidateEdge]!
  aggregate: AggregateCandidate!
}

input CandidateCreateInput {
  id: ID
  empName: String!
  empCode: String!
  mobileNumber: String!
  region: String
  unit: String
  location: String
  gender: Gender!
  doj: String
  age: Int
  qualification: String
  function: String
  subfunction: String
  vertical: String
  worklevel: String
  interventionType: String
  intervention: String
  counselor: CounselorCreateOneInput!
}

input CandidateCreateOneInput {
  create: CandidateCreateInput
  connect: CandidateWhereUniqueInput
}

"""An edge in a connection."""
type CandidateEdge {
  """The item at the end of the edge."""
  node: Candidate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CandidateOrderByInput {
  id_ASC
  id_DESC
  empName_ASC
  empName_DESC
  empCode_ASC
  empCode_DESC
  mobileNumber_ASC
  mobileNumber_DESC
  region_ASC
  region_DESC
  unit_ASC
  unit_DESC
  location_ASC
  location_DESC
  gender_ASC
  gender_DESC
  doj_ASC
  doj_DESC
  age_ASC
  age_DESC
  qualification_ASC
  qualification_DESC
  function_ASC
  function_DESC
  subfunction_ASC
  subfunction_DESC
  vertical_ASC
  vertical_DESC
  worklevel_ASC
  worklevel_DESC
  interventionType_ASC
  interventionType_DESC
  intervention_ASC
  intervention_DESC
}

type CandidatePreviousValues {
  id: ID!
  empName: String!
  empCode: String!
  mobileNumber: String!
  region: String
  unit: String
  location: String
  gender: Gender!
  doj: String
  age: Int
  qualification: String
  function: String
  subfunction: String
  vertical: String
  worklevel: String
  interventionType: String
  intervention: String
}

type CandidateSubscriptionPayload {
  mutation: MutationType!
  node: Candidate
  updatedFields: [String!]
  previousValues: CandidatePreviousValues
}

input CandidateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CandidateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CandidateWhereInput
}

input CandidateUpdateDataInput {
  empName: String
  empCode: String
  mobileNumber: String
  region: String
  unit: String
  location: String
  gender: Gender
  doj: String
  age: Int
  qualification: String
  function: String
  subfunction: String
  vertical: String
  worklevel: String
  interventionType: String
  intervention: String
  counselor: CounselorUpdateOneRequiredInput
}

input CandidateUpdateInput {
  empName: String
  empCode: String
  mobileNumber: String
  region: String
  unit: String
  location: String
  gender: Gender
  doj: String
  age: Int
  qualification: String
  function: String
  subfunction: String
  vertical: String
  worklevel: String
  interventionType: String
  intervention: String
  counselor: CounselorUpdateOneRequiredInput
}

input CandidateUpdateManyMutationInput {
  empName: String
  empCode: String
  mobileNumber: String
  region: String
  unit: String
  location: String
  gender: Gender
  doj: String
  age: Int
  qualification: String
  function: String
  subfunction: String
  vertical: String
  worklevel: String
  interventionType: String
  intervention: String
}

input CandidateUpdateOneRequiredInput {
  create: CandidateCreateInput
  connect: CandidateWhereUniqueInput
  update: CandidateUpdateDataInput
  upsert: CandidateUpsertNestedInput
}

input CandidateUpsertNestedInput {
  update: CandidateUpdateDataInput!
  create: CandidateCreateInput!
}

input CandidateWhereInput {
  """Logical AND on all given filters."""
  AND: [CandidateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  empName: String

  """All values that are not equal to given value."""
  empName_not: String

  """All values that are contained in given list."""
  empName_in: [String!]

  """All values that are not contained in given list."""
  empName_not_in: [String!]

  """All values less than the given value."""
  empName_lt: String

  """All values less than or equal the given value."""
  empName_lte: String

  """All values greater than the given value."""
  empName_gt: String

  """All values greater than or equal the given value."""
  empName_gte: String

  """All values containing the given string."""
  empName_contains: String

  """All values not containing the given string."""
  empName_not_contains: String

  """All values starting with the given string."""
  empName_starts_with: String

  """All values not starting with the given string."""
  empName_not_starts_with: String

  """All values ending with the given string."""
  empName_ends_with: String

  """All values not ending with the given string."""
  empName_not_ends_with: String
  empCode: String

  """All values that are not equal to given value."""
  empCode_not: String

  """All values that are contained in given list."""
  empCode_in: [String!]

  """All values that are not contained in given list."""
  empCode_not_in: [String!]

  """All values less than the given value."""
  empCode_lt: String

  """All values less than or equal the given value."""
  empCode_lte: String

  """All values greater than the given value."""
  empCode_gt: String

  """All values greater than or equal the given value."""
  empCode_gte: String

  """All values containing the given string."""
  empCode_contains: String

  """All values not containing the given string."""
  empCode_not_contains: String

  """All values starting with the given string."""
  empCode_starts_with: String

  """All values not starting with the given string."""
  empCode_not_starts_with: String

  """All values ending with the given string."""
  empCode_ends_with: String

  """All values not ending with the given string."""
  empCode_not_ends_with: String
  mobileNumber: String

  """All values that are not equal to given value."""
  mobileNumber_not: String

  """All values that are contained in given list."""
  mobileNumber_in: [String!]

  """All values that are not contained in given list."""
  mobileNumber_not_in: [String!]

  """All values less than the given value."""
  mobileNumber_lt: String

  """All values less than or equal the given value."""
  mobileNumber_lte: String

  """All values greater than the given value."""
  mobileNumber_gt: String

  """All values greater than or equal the given value."""
  mobileNumber_gte: String

  """All values containing the given string."""
  mobileNumber_contains: String

  """All values not containing the given string."""
  mobileNumber_not_contains: String

  """All values starting with the given string."""
  mobileNumber_starts_with: String

  """All values not starting with the given string."""
  mobileNumber_not_starts_with: String

  """All values ending with the given string."""
  mobileNumber_ends_with: String

  """All values not ending with the given string."""
  mobileNumber_not_ends_with: String
  region: String

  """All values that are not equal to given value."""
  region_not: String

  """All values that are contained in given list."""
  region_in: [String!]

  """All values that are not contained in given list."""
  region_not_in: [String!]

  """All values less than the given value."""
  region_lt: String

  """All values less than or equal the given value."""
  region_lte: String

  """All values greater than the given value."""
  region_gt: String

  """All values greater than or equal the given value."""
  region_gte: String

  """All values containing the given string."""
  region_contains: String

  """All values not containing the given string."""
  region_not_contains: String

  """All values starting with the given string."""
  region_starts_with: String

  """All values not starting with the given string."""
  region_not_starts_with: String

  """All values ending with the given string."""
  region_ends_with: String

  """All values not ending with the given string."""
  region_not_ends_with: String
  unit: String

  """All values that are not equal to given value."""
  unit_not: String

  """All values that are contained in given list."""
  unit_in: [String!]

  """All values that are not contained in given list."""
  unit_not_in: [String!]

  """All values less than the given value."""
  unit_lt: String

  """All values less than or equal the given value."""
  unit_lte: String

  """All values greater than the given value."""
  unit_gt: String

  """All values greater than or equal the given value."""
  unit_gte: String

  """All values containing the given string."""
  unit_contains: String

  """All values not containing the given string."""
  unit_not_contains: String

  """All values starting with the given string."""
  unit_starts_with: String

  """All values not starting with the given string."""
  unit_not_starts_with: String

  """All values ending with the given string."""
  unit_ends_with: String

  """All values not ending with the given string."""
  unit_not_ends_with: String
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  doj: String

  """All values that are not equal to given value."""
  doj_not: String

  """All values that are contained in given list."""
  doj_in: [String!]

  """All values that are not contained in given list."""
  doj_not_in: [String!]

  """All values less than the given value."""
  doj_lt: String

  """All values less than or equal the given value."""
  doj_lte: String

  """All values greater than the given value."""
  doj_gt: String

  """All values greater than or equal the given value."""
  doj_gte: String

  """All values containing the given string."""
  doj_contains: String

  """All values not containing the given string."""
  doj_not_contains: String

  """All values starting with the given string."""
  doj_starts_with: String

  """All values not starting with the given string."""
  doj_not_starts_with: String

  """All values ending with the given string."""
  doj_ends_with: String

  """All values not ending with the given string."""
  doj_not_ends_with: String
  age: Int

  """All values that are not equal to given value."""
  age_not: Int

  """All values that are contained in given list."""
  age_in: [Int!]

  """All values that are not contained in given list."""
  age_not_in: [Int!]

  """All values less than the given value."""
  age_lt: Int

  """All values less than or equal the given value."""
  age_lte: Int

  """All values greater than the given value."""
  age_gt: Int

  """All values greater than or equal the given value."""
  age_gte: Int
  qualification: String

  """All values that are not equal to given value."""
  qualification_not: String

  """All values that are contained in given list."""
  qualification_in: [String!]

  """All values that are not contained in given list."""
  qualification_not_in: [String!]

  """All values less than the given value."""
  qualification_lt: String

  """All values less than or equal the given value."""
  qualification_lte: String

  """All values greater than the given value."""
  qualification_gt: String

  """All values greater than or equal the given value."""
  qualification_gte: String

  """All values containing the given string."""
  qualification_contains: String

  """All values not containing the given string."""
  qualification_not_contains: String

  """All values starting with the given string."""
  qualification_starts_with: String

  """All values not starting with the given string."""
  qualification_not_starts_with: String

  """All values ending with the given string."""
  qualification_ends_with: String

  """All values not ending with the given string."""
  qualification_not_ends_with: String
  function: String

  """All values that are not equal to given value."""
  function_not: String

  """All values that are contained in given list."""
  function_in: [String!]

  """All values that are not contained in given list."""
  function_not_in: [String!]

  """All values less than the given value."""
  function_lt: String

  """All values less than or equal the given value."""
  function_lte: String

  """All values greater than the given value."""
  function_gt: String

  """All values greater than or equal the given value."""
  function_gte: String

  """All values containing the given string."""
  function_contains: String

  """All values not containing the given string."""
  function_not_contains: String

  """All values starting with the given string."""
  function_starts_with: String

  """All values not starting with the given string."""
  function_not_starts_with: String

  """All values ending with the given string."""
  function_ends_with: String

  """All values not ending with the given string."""
  function_not_ends_with: String
  subfunction: String

  """All values that are not equal to given value."""
  subfunction_not: String

  """All values that are contained in given list."""
  subfunction_in: [String!]

  """All values that are not contained in given list."""
  subfunction_not_in: [String!]

  """All values less than the given value."""
  subfunction_lt: String

  """All values less than or equal the given value."""
  subfunction_lte: String

  """All values greater than the given value."""
  subfunction_gt: String

  """All values greater than or equal the given value."""
  subfunction_gte: String

  """All values containing the given string."""
  subfunction_contains: String

  """All values not containing the given string."""
  subfunction_not_contains: String

  """All values starting with the given string."""
  subfunction_starts_with: String

  """All values not starting with the given string."""
  subfunction_not_starts_with: String

  """All values ending with the given string."""
  subfunction_ends_with: String

  """All values not ending with the given string."""
  subfunction_not_ends_with: String
  vertical: String

  """All values that are not equal to given value."""
  vertical_not: String

  """All values that are contained in given list."""
  vertical_in: [String!]

  """All values that are not contained in given list."""
  vertical_not_in: [String!]

  """All values less than the given value."""
  vertical_lt: String

  """All values less than or equal the given value."""
  vertical_lte: String

  """All values greater than the given value."""
  vertical_gt: String

  """All values greater than or equal the given value."""
  vertical_gte: String

  """All values containing the given string."""
  vertical_contains: String

  """All values not containing the given string."""
  vertical_not_contains: String

  """All values starting with the given string."""
  vertical_starts_with: String

  """All values not starting with the given string."""
  vertical_not_starts_with: String

  """All values ending with the given string."""
  vertical_ends_with: String

  """All values not ending with the given string."""
  vertical_not_ends_with: String
  worklevel: String

  """All values that are not equal to given value."""
  worklevel_not: String

  """All values that are contained in given list."""
  worklevel_in: [String!]

  """All values that are not contained in given list."""
  worklevel_not_in: [String!]

  """All values less than the given value."""
  worklevel_lt: String

  """All values less than or equal the given value."""
  worklevel_lte: String

  """All values greater than the given value."""
  worklevel_gt: String

  """All values greater than or equal the given value."""
  worklevel_gte: String

  """All values containing the given string."""
  worklevel_contains: String

  """All values not containing the given string."""
  worklevel_not_contains: String

  """All values starting with the given string."""
  worklevel_starts_with: String

  """All values not starting with the given string."""
  worklevel_not_starts_with: String

  """All values ending with the given string."""
  worklevel_ends_with: String

  """All values not ending with the given string."""
  worklevel_not_ends_with: String
  interventionType: String

  """All values that are not equal to given value."""
  interventionType_not: String

  """All values that are contained in given list."""
  interventionType_in: [String!]

  """All values that are not contained in given list."""
  interventionType_not_in: [String!]

  """All values less than the given value."""
  interventionType_lt: String

  """All values less than or equal the given value."""
  interventionType_lte: String

  """All values greater than the given value."""
  interventionType_gt: String

  """All values greater than or equal the given value."""
  interventionType_gte: String

  """All values containing the given string."""
  interventionType_contains: String

  """All values not containing the given string."""
  interventionType_not_contains: String

  """All values starting with the given string."""
  interventionType_starts_with: String

  """All values not starting with the given string."""
  interventionType_not_starts_with: String

  """All values ending with the given string."""
  interventionType_ends_with: String

  """All values not ending with the given string."""
  interventionType_not_ends_with: String
  intervention: String

  """All values that are not equal to given value."""
  intervention_not: String

  """All values that are contained in given list."""
  intervention_in: [String!]

  """All values that are not contained in given list."""
  intervention_not_in: [String!]

  """All values less than the given value."""
  intervention_lt: String

  """All values less than or equal the given value."""
  intervention_lte: String

  """All values greater than the given value."""
  intervention_gt: String

  """All values greater than or equal the given value."""
  intervention_gte: String

  """All values containing the given string."""
  intervention_contains: String

  """All values not containing the given string."""
  intervention_not_contains: String

  """All values starting with the given string."""
  intervention_starts_with: String

  """All values not starting with the given string."""
  intervention_not_starts_with: String

  """All values ending with the given string."""
  intervention_ends_with: String

  """All values not ending with the given string."""
  intervention_not_ends_with: String
  counselor: CounselorWhereInput
}

input CandidateWhereUniqueInput {
  id: ID
}

type Counselor implements Node {
  id: ID!
  empCode: String!
  mail: String!
  mobileNumber: String!
}

"""A connection to a list of items."""
type CounselorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CounselorEdge]!
  aggregate: AggregateCounselor!
}

input CounselorCreateInput {
  id: ID
  empCode: String!
  mail: String!
  mobileNumber: String!
}

input CounselorCreateOneInput {
  create: CounselorCreateInput
  connect: CounselorWhereUniqueInput
}

"""An edge in a connection."""
type CounselorEdge {
  """The item at the end of the edge."""
  node: Counselor!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CounselorOrderByInput {
  id_ASC
  id_DESC
  empCode_ASC
  empCode_DESC
  mail_ASC
  mail_DESC
  mobileNumber_ASC
  mobileNumber_DESC
}

type CounselorPreviousValues {
  id: ID!
  empCode: String!
  mail: String!
  mobileNumber: String!
}

type CounselorSubscriptionPayload {
  mutation: MutationType!
  node: Counselor
  updatedFields: [String!]
  previousValues: CounselorPreviousValues
}

input CounselorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CounselorSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CounselorWhereInput
}

input CounselorUpdateDataInput {
  empCode: String
  mail: String
  mobileNumber: String
}

input CounselorUpdateInput {
  empCode: String
  mail: String
  mobileNumber: String
}

input CounselorUpdateManyMutationInput {
  empCode: String
  mail: String
  mobileNumber: String
}

input CounselorUpdateOneRequiredInput {
  create: CounselorCreateInput
  connect: CounselorWhereUniqueInput
  update: CounselorUpdateDataInput
  upsert: CounselorUpsertNestedInput
}

input CounselorUpsertNestedInput {
  update: CounselorUpdateDataInput!
  create: CounselorCreateInput!
}

input CounselorWhereInput {
  """Logical AND on all given filters."""
  AND: [CounselorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  empCode: String

  """All values that are not equal to given value."""
  empCode_not: String

  """All values that are contained in given list."""
  empCode_in: [String!]

  """All values that are not contained in given list."""
  empCode_not_in: [String!]

  """All values less than the given value."""
  empCode_lt: String

  """All values less than or equal the given value."""
  empCode_lte: String

  """All values greater than the given value."""
  empCode_gt: String

  """All values greater than or equal the given value."""
  empCode_gte: String

  """All values containing the given string."""
  empCode_contains: String

  """All values not containing the given string."""
  empCode_not_contains: String

  """All values starting with the given string."""
  empCode_starts_with: String

  """All values not starting with the given string."""
  empCode_not_starts_with: String

  """All values ending with the given string."""
  empCode_ends_with: String

  """All values not ending with the given string."""
  empCode_not_ends_with: String
  mail: String

  """All values that are not equal to given value."""
  mail_not: String

  """All values that are contained in given list."""
  mail_in: [String!]

  """All values that are not contained in given list."""
  mail_not_in: [String!]

  """All values less than the given value."""
  mail_lt: String

  """All values less than or equal the given value."""
  mail_lte: String

  """All values greater than the given value."""
  mail_gt: String

  """All values greater than or equal the given value."""
  mail_gte: String

  """All values containing the given string."""
  mail_contains: String

  """All values not containing the given string."""
  mail_not_contains: String

  """All values starting with the given string."""
  mail_starts_with: String

  """All values not starting with the given string."""
  mail_not_starts_with: String

  """All values ending with the given string."""
  mail_ends_with: String

  """All values not ending with the given string."""
  mail_not_ends_with: String
  mobileNumber: String

  """All values that are not equal to given value."""
  mobileNumber_not: String

  """All values that are contained in given list."""
  mobileNumber_in: [String!]

  """All values that are not contained in given list."""
  mobileNumber_not_in: [String!]

  """All values less than the given value."""
  mobileNumber_lt: String

  """All values less than or equal the given value."""
  mobileNumber_lte: String

  """All values greater than the given value."""
  mobileNumber_gt: String

  """All values greater than or equal the given value."""
  mobileNumber_gte: String

  """All values containing the given string."""
  mobileNumber_contains: String

  """All values not containing the given string."""
  mobileNumber_not_contains: String

  """All values starting with the given string."""
  mobileNumber_starts_with: String

  """All values not starting with the given string."""
  mobileNumber_not_starts_with: String

  """All values ending with the given string."""
  mobileNumber_ends_with: String

  """All values not ending with the given string."""
  mobileNumber_not_ends_with: String
}

input CounselorWhereUniqueInput {
  id: ID
}

type Function implements Node {
  id: ID!
  function: String!
}

"""A connection to a list of items."""
type FunctionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FunctionEdge]!
  aggregate: AggregateFunction!
}

input FunctionCreateInput {
  id: ID
  function: String!
}

"""An edge in a connection."""
type FunctionEdge {
  """The item at the end of the edge."""
  node: Function!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FunctionOrderByInput {
  id_ASC
  id_DESC
  function_ASC
  function_DESC
}

type FunctionPreviousValues {
  id: ID!
  function: String!
}

type FunctionSubscriptionPayload {
  mutation: MutationType!
  node: Function
  updatedFields: [String!]
  previousValues: FunctionPreviousValues
}

input FunctionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FunctionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FunctionWhereInput
}

input FunctionUpdateInput {
  function: String
}

input FunctionUpdateManyMutationInput {
  function: String
}

input FunctionWhereInput {
  """Logical AND on all given filters."""
  AND: [FunctionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  function: String

  """All values that are not equal to given value."""
  function_not: String

  """All values that are contained in given list."""
  function_in: [String!]

  """All values that are not contained in given list."""
  function_not_in: [String!]

  """All values less than the given value."""
  function_lt: String

  """All values less than or equal the given value."""
  function_lte: String

  """All values greater than the given value."""
  function_gt: String

  """All values greater than or equal the given value."""
  function_gte: String

  """All values containing the given string."""
  function_contains: String

  """All values not containing the given string."""
  function_not_contains: String

  """All values starting with the given string."""
  function_starts_with: String

  """All values not starting with the given string."""
  function_not_starts_with: String

  """All values ending with the given string."""
  function_ends_with: String

  """All values not ending with the given string."""
  function_not_ends_with: String
}

input FunctionWhereUniqueInput {
  id: ID
}

enum Gender {
  FEMALE
  MALE
}

type HRAScan implements Node {
  id: ID!
  candidate: Candidate!
  BMI: Float!
  BP: Float!
  BG: Float!
  LDL: Float!
}

"""A connection to a list of items."""
type HRAScanConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HRAScanEdge]!
  aggregate: AggregateHRAScan!
}

input HRAScanCreateInput {
  id: ID
  BMI: Float!
  BP: Float!
  BG: Float!
  LDL: Float!
  candidate: CandidateCreateOneInput!
}

"""An edge in a connection."""
type HRAScanEdge {
  """The item at the end of the edge."""
  node: HRAScan!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HRAScanOrderByInput {
  id_ASC
  id_DESC
  BMI_ASC
  BMI_DESC
  BP_ASC
  BP_DESC
  BG_ASC
  BG_DESC
  LDL_ASC
  LDL_DESC
}

type HRAScanPreviousValues {
  id: ID!
  BMI: Float!
  BP: Float!
  BG: Float!
  LDL: Float!
}

type HRAScanSubscriptionPayload {
  mutation: MutationType!
  node: HRAScan
  updatedFields: [String!]
  previousValues: HRAScanPreviousValues
}

input HRAScanSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HRAScanSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HRAScanWhereInput
}

input HRAScanUpdateInput {
  BMI: Float
  BP: Float
  BG: Float
  LDL: Float
  candidate: CandidateUpdateOneRequiredInput
}

input HRAScanUpdateManyMutationInput {
  BMI: Float
  BP: Float
  BG: Float
  LDL: Float
}

input HRAScanWhereInput {
  """Logical AND on all given filters."""
  AND: [HRAScanWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  BMI: Float

  """All values that are not equal to given value."""
  BMI_not: Float

  """All values that are contained in given list."""
  BMI_in: [Float!]

  """All values that are not contained in given list."""
  BMI_not_in: [Float!]

  """All values less than the given value."""
  BMI_lt: Float

  """All values less than or equal the given value."""
  BMI_lte: Float

  """All values greater than the given value."""
  BMI_gt: Float

  """All values greater than or equal the given value."""
  BMI_gte: Float
  BP: Float

  """All values that are not equal to given value."""
  BP_not: Float

  """All values that are contained in given list."""
  BP_in: [Float!]

  """All values that are not contained in given list."""
  BP_not_in: [Float!]

  """All values less than the given value."""
  BP_lt: Float

  """All values less than or equal the given value."""
  BP_lte: Float

  """All values greater than the given value."""
  BP_gt: Float

  """All values greater than or equal the given value."""
  BP_gte: Float
  BG: Float

  """All values that are not equal to given value."""
  BG_not: Float

  """All values that are contained in given list."""
  BG_in: [Float!]

  """All values that are not contained in given list."""
  BG_not_in: [Float!]

  """All values less than the given value."""
  BG_lt: Float

  """All values less than or equal the given value."""
  BG_lte: Float

  """All values greater than the given value."""
  BG_gt: Float

  """All values greater than or equal the given value."""
  BG_gte: Float
  LDL: Float

  """All values that are not equal to given value."""
  LDL_not: Float

  """All values that are contained in given list."""
  LDL_in: [Float!]

  """All values that are not contained in given list."""
  LDL_not_in: [Float!]

  """All values less than the given value."""
  LDL_lt: Float

  """All values less than or equal the given value."""
  LDL_lte: Float

  """All values greater than the given value."""
  LDL_gt: Float

  """All values greater than or equal the given value."""
  LDL_gte: Float
  candidate: CandidateWhereInput
}

input HRAScanWhereUniqueInput {
  id: ID
}

type Intervention implements Node {
  id: ID!
  intervention: String!
}

"""A connection to a list of items."""
type InterventionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InterventionEdge]!
  aggregate: AggregateIntervention!
}

input InterventionCreateInput {
  id: ID
  intervention: String!
}

"""An edge in a connection."""
type InterventionEdge {
  """The item at the end of the edge."""
  node: Intervention!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InterventionOrderByInput {
  id_ASC
  id_DESC
  intervention_ASC
  intervention_DESC
}

type InterventionPreviousValues {
  id: ID!
  intervention: String!
}

type InterventionSubscriptionPayload {
  mutation: MutationType!
  node: Intervention
  updatedFields: [String!]
  previousValues: InterventionPreviousValues
}

input InterventionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InterventionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InterventionWhereInput
}

type InterventionType implements Node {
  id: ID!
  interventionType: String!
}

"""A connection to a list of items."""
type InterventionTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InterventionTypeEdge]!
  aggregate: AggregateInterventionType!
}

input InterventionTypeCreateInput {
  id: ID
  interventionType: String!
}

"""An edge in a connection."""
type InterventionTypeEdge {
  """The item at the end of the edge."""
  node: InterventionType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InterventionTypeOrderByInput {
  id_ASC
  id_DESC
  interventionType_ASC
  interventionType_DESC
}

type InterventionTypePreviousValues {
  id: ID!
  interventionType: String!
}

type InterventionTypeSubscriptionPayload {
  mutation: MutationType!
  node: InterventionType
  updatedFields: [String!]
  previousValues: InterventionTypePreviousValues
}

input InterventionTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InterventionTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InterventionTypeWhereInput
}

input InterventionTypeUpdateInput {
  interventionType: String
}

input InterventionTypeUpdateManyMutationInput {
  interventionType: String
}

input InterventionTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [InterventionTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  interventionType: String

  """All values that are not equal to given value."""
  interventionType_not: String

  """All values that are contained in given list."""
  interventionType_in: [String!]

  """All values that are not contained in given list."""
  interventionType_not_in: [String!]

  """All values less than the given value."""
  interventionType_lt: String

  """All values less than or equal the given value."""
  interventionType_lte: String

  """All values greater than the given value."""
  interventionType_gt: String

  """All values greater than or equal the given value."""
  interventionType_gte: String

  """All values containing the given string."""
  interventionType_contains: String

  """All values not containing the given string."""
  interventionType_not_contains: String

  """All values starting with the given string."""
  interventionType_starts_with: String

  """All values not starting with the given string."""
  interventionType_not_starts_with: String

  """All values ending with the given string."""
  interventionType_ends_with: String

  """All values not ending with the given string."""
  interventionType_not_ends_with: String
}

input InterventionTypeWhereUniqueInput {
  id: ID
}

input InterventionUpdateInput {
  intervention: String
}

input InterventionUpdateManyMutationInput {
  intervention: String
}

input InterventionWhereInput {
  """Logical AND on all given filters."""
  AND: [InterventionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  intervention: String

  """All values that are not equal to given value."""
  intervention_not: String

  """All values that are contained in given list."""
  intervention_in: [String!]

  """All values that are not contained in given list."""
  intervention_not_in: [String!]

  """All values less than the given value."""
  intervention_lt: String

  """All values less than or equal the given value."""
  intervention_lte: String

  """All values greater than the given value."""
  intervention_gt: String

  """All values greater than or equal the given value."""
  intervention_gte: String

  """All values containing the given string."""
  intervention_contains: String

  """All values not containing the given string."""
  intervention_not_contains: String

  """All values starting with the given string."""
  intervention_starts_with: String

  """All values not starting with the given string."""
  intervention_not_starts_with: String

  """All values ending with the given string."""
  intervention_ends_with: String

  """All values not ending with the given string."""
  intervention_not_ends_with: String
}

input InterventionWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createVertical(data: VerticalCreateInput!): Vertical!
  createWorklevel(data: WorklevelCreateInput!): Worklevel!
  createInterventionType(data: InterventionTypeCreateInput!): InterventionType!
  createQualification(data: QualificationCreateInput!): Qualification!
  createIntervention(data: InterventionCreateInput!): Intervention!
  createFunction(data: FunctionCreateInput!): Function!
  createSubfunction(data: SubfunctionCreateInput!): Subfunction!
  createHRAScan(data: HRAScanCreateInput!): HRAScan!
  createCandidate(data: CandidateCreateInput!): Candidate!
  createCounselor(data: CounselorCreateInput!): Counselor!
  updateVertical(data: VerticalUpdateInput!, where: VerticalWhereUniqueInput!): Vertical
  updateWorklevel(data: WorklevelUpdateInput!, where: WorklevelWhereUniqueInput!): Worklevel
  updateInterventionType(data: InterventionTypeUpdateInput!, where: InterventionTypeWhereUniqueInput!): InterventionType
  updateQualification(data: QualificationUpdateInput!, where: QualificationWhereUniqueInput!): Qualification
  updateIntervention(data: InterventionUpdateInput!, where: InterventionWhereUniqueInput!): Intervention
  updateFunction(data: FunctionUpdateInput!, where: FunctionWhereUniqueInput!): Function
  updateSubfunction(data: SubfunctionUpdateInput!, where: SubfunctionWhereUniqueInput!): Subfunction
  updateHRAScan(data: HRAScanUpdateInput!, where: HRAScanWhereUniqueInput!): HRAScan
  updateCandidate(data: CandidateUpdateInput!, where: CandidateWhereUniqueInput!): Candidate
  updateCounselor(data: CounselorUpdateInput!, where: CounselorWhereUniqueInput!): Counselor
  deleteVertical(where: VerticalWhereUniqueInput!): Vertical
  deleteWorklevel(where: WorklevelWhereUniqueInput!): Worklevel
  deleteInterventionType(where: InterventionTypeWhereUniqueInput!): InterventionType
  deleteQualification(where: QualificationWhereUniqueInput!): Qualification
  deleteIntervention(where: InterventionWhereUniqueInput!): Intervention
  deleteFunction(where: FunctionWhereUniqueInput!): Function
  deleteSubfunction(where: SubfunctionWhereUniqueInput!): Subfunction
  deleteHRAScan(where: HRAScanWhereUniqueInput!): HRAScan
  deleteCandidate(where: CandidateWhereUniqueInput!): Candidate
  deleteCounselor(where: CounselorWhereUniqueInput!): Counselor
  upsertVertical(where: VerticalWhereUniqueInput!, create: VerticalCreateInput!, update: VerticalUpdateInput!): Vertical!
  upsertWorklevel(where: WorklevelWhereUniqueInput!, create: WorklevelCreateInput!, update: WorklevelUpdateInput!): Worklevel!
  upsertInterventionType(where: InterventionTypeWhereUniqueInput!, create: InterventionTypeCreateInput!, update: InterventionTypeUpdateInput!): InterventionType!
  upsertQualification(where: QualificationWhereUniqueInput!, create: QualificationCreateInput!, update: QualificationUpdateInput!): Qualification!
  upsertIntervention(where: InterventionWhereUniqueInput!, create: InterventionCreateInput!, update: InterventionUpdateInput!): Intervention!
  upsertFunction(where: FunctionWhereUniqueInput!, create: FunctionCreateInput!, update: FunctionUpdateInput!): Function!
  upsertSubfunction(where: SubfunctionWhereUniqueInput!, create: SubfunctionCreateInput!, update: SubfunctionUpdateInput!): Subfunction!
  upsertHRAScan(where: HRAScanWhereUniqueInput!, create: HRAScanCreateInput!, update: HRAScanUpdateInput!): HRAScan!
  upsertCandidate(where: CandidateWhereUniqueInput!, create: CandidateCreateInput!, update: CandidateUpdateInput!): Candidate!
  upsertCounselor(where: CounselorWhereUniqueInput!, create: CounselorCreateInput!, update: CounselorUpdateInput!): Counselor!
  updateManyVerticals(data: VerticalUpdateManyMutationInput!, where: VerticalWhereInput): BatchPayload!
  updateManyWorklevels(data: WorklevelUpdateManyMutationInput!, where: WorklevelWhereInput): BatchPayload!
  updateManyInterventionTypes(data: InterventionTypeUpdateManyMutationInput!, where: InterventionTypeWhereInput): BatchPayload!
  updateManyQualifications(data: QualificationUpdateManyMutationInput!, where: QualificationWhereInput): BatchPayload!
  updateManyInterventions(data: InterventionUpdateManyMutationInput!, where: InterventionWhereInput): BatchPayload!
  updateManyFunctions(data: FunctionUpdateManyMutationInput!, where: FunctionWhereInput): BatchPayload!
  updateManySubfunctions(data: SubfunctionUpdateManyMutationInput!, where: SubfunctionWhereInput): BatchPayload!
  updateManyHRAScans(data: HRAScanUpdateManyMutationInput!, where: HRAScanWhereInput): BatchPayload!
  updateManyCandidates(data: CandidateUpdateManyMutationInput!, where: CandidateWhereInput): BatchPayload!
  updateManyCounselors(data: CounselorUpdateManyMutationInput!, where: CounselorWhereInput): BatchPayload!
  deleteManyVerticals(where: VerticalWhereInput): BatchPayload!
  deleteManyWorklevels(where: WorklevelWhereInput): BatchPayload!
  deleteManyInterventionTypes(where: InterventionTypeWhereInput): BatchPayload!
  deleteManyQualifications(where: QualificationWhereInput): BatchPayload!
  deleteManyInterventions(where: InterventionWhereInput): BatchPayload!
  deleteManyFunctions(where: FunctionWhereInput): BatchPayload!
  deleteManySubfunctions(where: SubfunctionWhereInput): BatchPayload!
  deleteManyHRAScans(where: HRAScanWhereInput): BatchPayload!
  deleteManyCandidates(where: CandidateWhereInput): BatchPayload!
  deleteManyCounselors(where: CounselorWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Qualification implements Node {
  id: ID!
  qualification: String!
}

"""A connection to a list of items."""
type QualificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QualificationEdge]!
  aggregate: AggregateQualification!
}

input QualificationCreateInput {
  id: ID
  qualification: String!
}

"""An edge in a connection."""
type QualificationEdge {
  """The item at the end of the edge."""
  node: Qualification!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QualificationOrderByInput {
  id_ASC
  id_DESC
  qualification_ASC
  qualification_DESC
}

type QualificationPreviousValues {
  id: ID!
  qualification: String!
}

type QualificationSubscriptionPayload {
  mutation: MutationType!
  node: Qualification
  updatedFields: [String!]
  previousValues: QualificationPreviousValues
}

input QualificationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QualificationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QualificationWhereInput
}

input QualificationUpdateInput {
  qualification: String
}

input QualificationUpdateManyMutationInput {
  qualification: String
}

input QualificationWhereInput {
  """Logical AND on all given filters."""
  AND: [QualificationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  qualification: String

  """All values that are not equal to given value."""
  qualification_not: String

  """All values that are contained in given list."""
  qualification_in: [String!]

  """All values that are not contained in given list."""
  qualification_not_in: [String!]

  """All values less than the given value."""
  qualification_lt: String

  """All values less than or equal the given value."""
  qualification_lte: String

  """All values greater than the given value."""
  qualification_gt: String

  """All values greater than or equal the given value."""
  qualification_gte: String

  """All values containing the given string."""
  qualification_contains: String

  """All values not containing the given string."""
  qualification_not_contains: String

  """All values starting with the given string."""
  qualification_starts_with: String

  """All values not starting with the given string."""
  qualification_not_starts_with: String

  """All values ending with the given string."""
  qualification_ends_with: String

  """All values not ending with the given string."""
  qualification_not_ends_with: String
}

input QualificationWhereUniqueInput {
  id: ID
}

type Query {
  verticals(where: VerticalWhereInput, orderBy: VerticalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vertical]!
  worklevels(where: WorklevelWhereInput, orderBy: WorklevelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Worklevel]!
  interventionTypes(where: InterventionTypeWhereInput, orderBy: InterventionTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InterventionType]!
  qualifications(where: QualificationWhereInput, orderBy: QualificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Qualification]!
  interventions(where: InterventionWhereInput, orderBy: InterventionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Intervention]!
  functions(where: FunctionWhereInput, orderBy: FunctionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Function]!
  subfunctions(where: SubfunctionWhereInput, orderBy: SubfunctionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subfunction]!
  hRAScans(where: HRAScanWhereInput, orderBy: HRAScanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HRAScan]!
  candidates(where: CandidateWhereInput, orderBy: CandidateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Candidate]!
  counselors(where: CounselorWhereInput, orderBy: CounselorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Counselor]!
  vertical(where: VerticalWhereUniqueInput!): Vertical
  worklevel(where: WorklevelWhereUniqueInput!): Worklevel
  interventionType(where: InterventionTypeWhereUniqueInput!): InterventionType
  qualification(where: QualificationWhereUniqueInput!): Qualification
  intervention(where: InterventionWhereUniqueInput!): Intervention
  function(where: FunctionWhereUniqueInput!): Function
  subfunction(where: SubfunctionWhereUniqueInput!): Subfunction
  hRAScan(where: HRAScanWhereUniqueInput!): HRAScan
  candidate(where: CandidateWhereUniqueInput!): Candidate
  counselor(where: CounselorWhereUniqueInput!): Counselor
  verticalsConnection(where: VerticalWhereInput, orderBy: VerticalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VerticalConnection!
  worklevelsConnection(where: WorklevelWhereInput, orderBy: WorklevelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorklevelConnection!
  interventionTypesConnection(where: InterventionTypeWhereInput, orderBy: InterventionTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InterventionTypeConnection!
  qualificationsConnection(where: QualificationWhereInput, orderBy: QualificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QualificationConnection!
  interventionsConnection(where: InterventionWhereInput, orderBy: InterventionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InterventionConnection!
  functionsConnection(where: FunctionWhereInput, orderBy: FunctionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FunctionConnection!
  subfunctionsConnection(where: SubfunctionWhereInput, orderBy: SubfunctionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubfunctionConnection!
  hRAScansConnection(where: HRAScanWhereInput, orderBy: HRAScanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HRAScanConnection!
  candidatesConnection(where: CandidateWhereInput, orderBy: CandidateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CandidateConnection!
  counselorsConnection(where: CounselorWhereInput, orderBy: CounselorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CounselorConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subfunction implements Node {
  id: ID!
  subfunction: String!
}

"""A connection to a list of items."""
type SubfunctionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubfunctionEdge]!
  aggregate: AggregateSubfunction!
}

input SubfunctionCreateInput {
  id: ID
  subfunction: String!
}

"""An edge in a connection."""
type SubfunctionEdge {
  """The item at the end of the edge."""
  node: Subfunction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubfunctionOrderByInput {
  id_ASC
  id_DESC
  subfunction_ASC
  subfunction_DESC
}

type SubfunctionPreviousValues {
  id: ID!
  subfunction: String!
}

type SubfunctionSubscriptionPayload {
  mutation: MutationType!
  node: Subfunction
  updatedFields: [String!]
  previousValues: SubfunctionPreviousValues
}

input SubfunctionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubfunctionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubfunctionWhereInput
}

input SubfunctionUpdateInput {
  subfunction: String
}

input SubfunctionUpdateManyMutationInput {
  subfunction: String
}

input SubfunctionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubfunctionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subfunction: String

  """All values that are not equal to given value."""
  subfunction_not: String

  """All values that are contained in given list."""
  subfunction_in: [String!]

  """All values that are not contained in given list."""
  subfunction_not_in: [String!]

  """All values less than the given value."""
  subfunction_lt: String

  """All values less than or equal the given value."""
  subfunction_lte: String

  """All values greater than the given value."""
  subfunction_gt: String

  """All values greater than or equal the given value."""
  subfunction_gte: String

  """All values containing the given string."""
  subfunction_contains: String

  """All values not containing the given string."""
  subfunction_not_contains: String

  """All values starting with the given string."""
  subfunction_starts_with: String

  """All values not starting with the given string."""
  subfunction_not_starts_with: String

  """All values ending with the given string."""
  subfunction_ends_with: String

  """All values not ending with the given string."""
  subfunction_not_ends_with: String
}

input SubfunctionWhereUniqueInput {
  id: ID
}

type Subscription {
  vertical(where: VerticalSubscriptionWhereInput): VerticalSubscriptionPayload
  worklevel(where: WorklevelSubscriptionWhereInput): WorklevelSubscriptionPayload
  interventionType(where: InterventionTypeSubscriptionWhereInput): InterventionTypeSubscriptionPayload
  qualification(where: QualificationSubscriptionWhereInput): QualificationSubscriptionPayload
  intervention(where: InterventionSubscriptionWhereInput): InterventionSubscriptionPayload
  function(where: FunctionSubscriptionWhereInput): FunctionSubscriptionPayload
  subfunction(where: SubfunctionSubscriptionWhereInput): SubfunctionSubscriptionPayload
  hRAScan(where: HRAScanSubscriptionWhereInput): HRAScanSubscriptionPayload
  candidate(where: CandidateSubscriptionWhereInput): CandidateSubscriptionPayload
  counselor(where: CounselorSubscriptionWhereInput): CounselorSubscriptionPayload
}

type Vertical implements Node {
  id: ID!
  vertical: String!
}

"""A connection to a list of items."""
type VerticalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VerticalEdge]!
  aggregate: AggregateVertical!
}

input VerticalCreateInput {
  id: ID
  vertical: String!
}

"""An edge in a connection."""
type VerticalEdge {
  """The item at the end of the edge."""
  node: Vertical!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VerticalOrderByInput {
  id_ASC
  id_DESC
  vertical_ASC
  vertical_DESC
}

type VerticalPreviousValues {
  id: ID!
  vertical: String!
}

type VerticalSubscriptionPayload {
  mutation: MutationType!
  node: Vertical
  updatedFields: [String!]
  previousValues: VerticalPreviousValues
}

input VerticalSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VerticalSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VerticalWhereInput
}

input VerticalUpdateInput {
  vertical: String
}

input VerticalUpdateManyMutationInput {
  vertical: String
}

input VerticalWhereInput {
  """Logical AND on all given filters."""
  AND: [VerticalWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  vertical: String

  """All values that are not equal to given value."""
  vertical_not: String

  """All values that are contained in given list."""
  vertical_in: [String!]

  """All values that are not contained in given list."""
  vertical_not_in: [String!]

  """All values less than the given value."""
  vertical_lt: String

  """All values less than or equal the given value."""
  vertical_lte: String

  """All values greater than the given value."""
  vertical_gt: String

  """All values greater than or equal the given value."""
  vertical_gte: String

  """All values containing the given string."""
  vertical_contains: String

  """All values not containing the given string."""
  vertical_not_contains: String

  """All values starting with the given string."""
  vertical_starts_with: String

  """All values not starting with the given string."""
  vertical_not_starts_with: String

  """All values ending with the given string."""
  vertical_ends_with: String

  """All values not ending with the given string."""
  vertical_not_ends_with: String
}

input VerticalWhereUniqueInput {
  id: ID
}

type Worklevel implements Node {
  id: ID!
  worklevel: String!
}

"""A connection to a list of items."""
type WorklevelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorklevelEdge]!
  aggregate: AggregateWorklevel!
}

input WorklevelCreateInput {
  id: ID
  worklevel: String!
}

"""An edge in a connection."""
type WorklevelEdge {
  """The item at the end of the edge."""
  node: Worklevel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WorklevelOrderByInput {
  id_ASC
  id_DESC
  worklevel_ASC
  worklevel_DESC
}

type WorklevelPreviousValues {
  id: ID!
  worklevel: String!
}

type WorklevelSubscriptionPayload {
  mutation: MutationType!
  node: Worklevel
  updatedFields: [String!]
  previousValues: WorklevelPreviousValues
}

input WorklevelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WorklevelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WorklevelWhereInput
}

input WorklevelUpdateInput {
  worklevel: String
}

input WorklevelUpdateManyMutationInput {
  worklevel: String
}

input WorklevelWhereInput {
  """Logical AND on all given filters."""
  AND: [WorklevelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  worklevel: String

  """All values that are not equal to given value."""
  worklevel_not: String

  """All values that are contained in given list."""
  worklevel_in: [String!]

  """All values that are not contained in given list."""
  worklevel_not_in: [String!]

  """All values less than the given value."""
  worklevel_lt: String

  """All values less than or equal the given value."""
  worklevel_lte: String

  """All values greater than the given value."""
  worklevel_gt: String

  """All values greater than or equal the given value."""
  worklevel_gte: String

  """All values containing the given string."""
  worklevel_contains: String

  """All values not containing the given string."""
  worklevel_not_contains: String

  """All values starting with the given string."""
  worklevel_starts_with: String

  """All values not starting with the given string."""
  worklevel_not_starts_with: String

  """All values ending with the given string."""
  worklevel_ends_with: String

  """All values not ending with the given string."""
  worklevel_not_ends_with: String
}

input WorklevelWhereUniqueInput {
  id: ID
}

